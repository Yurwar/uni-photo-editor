package com.yurwar.uni.photo.editor

object ModifiedCutFilter extends ModifiedCutFilterInterface {

  /** –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Å–µ—Ä–µ–¥–Ω—å–æ–≥–æ –∑–Ω–∞—á–µ–Ω–Ω—è –≤ –º–µ–∂–∞—Ö
   * c * ùûÇ –≤—ñ–¥ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–≥–æ –ø—ñ–∫—Å–µ–ª—è
   *
   * @param M     –ú–∞—Å–∏–≤ –∑–Ω–∞—á–µ–Ω—å –∫–∞–Ω–∞–ª—É –ø–µ–≤–Ω–æ–≥–æ –∫–æ–ª—å–æ—Ä—É –Ω–∞–≤–∫–æ–ª–æ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–≥–æ –ø—ñ–∫—Å–µ–ª—è
   * @param index –Ü–Ω–¥–µ–∫—Å —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–≥–æ –ø—ñ–∫—Å–µ–ª—è
   * @param value –ó–Ω–∞—á–µ–Ω–Ω—è c * ùûÇ
   * @return –û–±—á–∏—Å–ª–µ–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è –∫–∞–Ω–∞–ª—É
   */
  def searchNearSko(M: Array[Int], index: Int, value: Double): Int = {
    var sum = 0
    var count = 0
    for (i <- M.indices)
      yield {
        if (i != index) {
          if (math.abs(M(i) - M(index)) <= value) {
            // –Ø–∫—â–æ –∑–Ω–∞—á–µ–Ω–Ω—è –≤—ñ–¥—Ä—ñ–∑–Ω–∞—î—Ç—å—Å—è –≤—ñ–¥ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–≥–æ –Ω–∞ –±—ñ–ª—å—à –Ω—ñ–∂ c * ùûÇ - –≤–∏–∫–æ–Ω—É—î–º–æ –¥–æ–¥–∞–≤–∞–Ω–Ω—è
            sum += M(i)
            count += 1
          }
        }
      }
    // –Ø–∫—â–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –Ω—ñ –æ–¥–Ω–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞ —è–∫–∏–π –±–∏ –∑–∞–¥–æ–≤—ñ–ª—å–Ω—è–≤ —É–º–æ–≤—É - –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è –º–µ–¥—ñ–∞–Ω–∏
    if (count == 0) {
      M(index)
    } else {
      // –ó–Ω–∞—Ö–æ–¥–∏–º–æ —Å–µ—Ä–µ–¥–Ω—î
      sum /= count
      sum
    }
  }

  /** –§—É–Ω–∫—Ü—ñ—è –æ–±—á–∏—Å–ª–µ–Ω–Ω—è –º–æ–¥–∏—Ñ—ñ–∫–æ–≤–∞–Ω–æ–≥–æ –æ–±—Ä—ñ–∑–Ω–æ–≥–æ —Ñ—ñ–ª—å—Ç—Ä—É
   *
   * @param src –í—Ö—ñ–¥–Ω–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
   * @param dst –í–∏—Ö—ñ–¥–Ω–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
   */
  override def modifiedCut(src: Img, dst: Img): Unit = {
    var sigmaR, sigmaG, sigmaB = 0.0
    var brightnessR, brightnessG, brightnessB = 0.0
    //–î–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ñ—ñ–ª—å—Ç—Ä—É –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –≤—ñ–∫–Ω–æ —Ä–æ–∑–º—ñ—Ä–æ–º 3 –Ω–∞ 3 –∑ –∫–æ–Ω—Å—Ç–∞–Ω—Ç–æ—é —Å = 0.5
    //–ó–±—ñ–ª—å—à–µ–Ω–Ω—è –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∏ –ø—Ä–∏–≤–µ–¥–µ –¥–æ –∑–±—ñ–ª—å—à–µ–Ω–Ω—è —á–∏—Å–ª–∞ –ø—ñ–∫—Å–µ–ª—ñ–≤, —è–∫—ñ –±—É–¥—É—Ç—å –±—Ä–∞—Ç–∏ —É—á–∞—Å—Ç—å –≤ –∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–Ω—å–æ–≥–æ
    //–£–º–µ–Ω—å—à–µ–Ω–∏–µ –ø—Ä–∏–≤–µ–¥–µ—Ç –∫ —Ç–æ–º—É, —á—Ç–æ –ø–æ–¥ –¥–µ–π—Å—Ç–≤–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ –±—É–¥–µ—Ç –ø–æ–ø–∞–¥–∞—Ç—å –∫—Ä–∞–π–Ω–µ –º–∞–ª–æ–µ —á–∏—Å–ª–æ –ø–∏–∫—Å–µ–ª–µ–π
    //–ó–º–µ–Ω—à–µ–Ω–Ω—è –ø—Ä–∏–≤–µ–¥–µ –¥–æ —Ç–æ–≥–æ, —â–æ –ø—ñ–¥ –¥—ñ—é —Ñ—ñ–ª—å—Ç—Ä–∞ –±—É–¥–µ –ø–æ–ø–∞–¥–∞—Ç–∏ –∫—Ä–∞–π–Ω—å–æ –º–∞–ª–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø—ñ–∫—Å–µ–ª—ñ–≤
    val c = 0.5
    var rc, gc, bc = 0

    //–ó–Ω–∞—Ö–æ–¥–∏–º–æ —Å–µ—Ä–µ–¥–Ω—î –∑–Ω–∞—á–µ–Ω–Ω—è –Ω–∞—Å–∏—á–µ–Ω–æ—Å—Ç—ñ –∫–∞–Ω–∞–ª—ñ–≤ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
    for (x <- 0 until src.width;
         y <- 0 until src.height)
    yield {
      brightnessR += red(src(x, y))
      brightnessG += green(src(x, y))
      brightnessB += blue(src(x, y))
    }
    brightnessR /= src.width * src.height
    brightnessG /= src.width * src.height
    brightnessB /= src.width * src.height

    //–ó–Ω–∞—Ö–æ–¥–∏–º–æ –¥–∏—Å–ø–µ—Ä—Å—ñ—é –¥–ª—è –≤—Å—å–æ–≥–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
    brightnessR = math.pow(brightnessR, 2)
    brightnessG = math.pow(brightnessG, 2)
    brightnessB = math.pow(brightnessB, 2)

    for (x <- 0 until src.width;
         y <- 0 until src.height)
    yield {
      sigmaR += math.pow(red(src(x, y)), 2) - brightnessR
      sigmaG += math.pow(green(src(x, y)), 2) - brightnessG
      sigmaB += math.pow(blue(src(x, y)), 2) - brightnessB
    }

    sigmaR /= src.width * src.height
    sigmaG /= src.width * src.height
    sigmaB /= src.width * src.height

    //–ó–Ω–∞—Ö–æ–¥–∏–º–æ –∫–æ—Ä—ñ–Ω—å —ñ–∑ –¥–∏—Å–ø–µ—Ä—Å—ñ—ó –¥–ª—è –∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è
    sigmaR = math.sqrt(sigmaR)
    sigmaG = math.sqrt(sigmaG)
    sigmaB = math.sqrt(sigmaB)

    var count = 0
    val R = Array.fill(9) {
      0
    }
    val G = Array.fill(9) {
      0
    }
    val B = Array.fill(9) {
      0
    }
    for (x <- 1 until src.width - 1;
         y <- 1 until src.height - 1)
    yield {
      count = 0
      for (k <- -1 to 1;
           m <- -1 to 1)
      yield {
        R(count) = red(src(x + k, y + m))
        G(count) = green(src(x + k, y + m))
        B(count) = blue(src(x + k, y + m))
        count += 1
      }
      rc = searchNearSko(R, 4, c * sigmaR)
      gc = searchNearSko(G, 4, c * sigmaG)
      bc = searchNearSko(B, 4, c * sigmaB)
      dst.update(x, y, rgba(rc, gc, bc, alpha(src(x, y))))
    }
  }
}
